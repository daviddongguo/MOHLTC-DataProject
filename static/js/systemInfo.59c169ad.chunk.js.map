{"version":3,"sources":["controller/serverInfo.js","views/System/index.js"],"names":["instance","ServerInfoManager","props","this","axios","get","config","server","axiosConfig","then","response","check","data","pieChartOptions","chart","animations","enabled","tooltip","y","formatter","val","Math","round","SystemInfo","_cpuOptions","xaxis","type","labels","show","axisTicks","yaxis","min","max","tickAmount","value","trunc","dataLabels","stroke","curve","update","systemManager","systemInfo","info","mem","currentLoad","memorySeries","active","free","buffcache","swapSeries","swapused","swapfree","cpuSeries","name","state","push","currentload","length","splice","setState","renderText","texts","key","Fragment","style","fontWeight","charAt","toUpperCase","slice","innerKey","title","SystemManager","memoryOptions","swapOptions","cpuOptions","staticSystemInfo","autoUpdate","setInterval","clearInterval","classes","Grid","container","spacing","item","xs","sm","md","lg","xl","Card","Typography","variant","gutterBottom","className","CardContent","options","series","height","system","osInfo","cpu","diskLayout","Component","withStyles","theme","textAlign","paddingTop","color"],"mappings":"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","file":"static/js/systemInfo.59c169ad.chunk.js","sourcesContent":["import axios from \"axios\";\nimport config from \"./../config/config\";\nimport {check, axiosConfig} from \"./common\";\n\n/**\n * Singleton Pattern\n */\nlet instance = null;\n\nexport default class ServerInfoManager {\n\n  constructor(props) {\n    if (!instance) {\n      instance = this;\n      // init\n      this.props = props;\n    }\n    return instance;\n  }\n\n  systemInfo() {\n    return axios.get(config.server + '/api/v2/system', axiosConfig)\n      .then(response => {\n        if (check(response)) {\n          return response.data;\n        }\n      })\n  }\n\n  staticSystemInfo() {\n    return axios.get(config.server + '/api/v2/system/static', axiosConfig)\n      .then(response => {\n        if (check(response)) {\n          return response.data;\n        }\n      })\n  }\n}\n","import React, {Component} from 'react';\nimport SystemManager from '../../controller/serverInfo'\nimport {Grid, Typography, Card, CardContent} from '@material-ui/core';\nimport ReactApexChart from 'react-apexcharts';\nimport {withStyles} from \"@material-ui/core/es\";\nimport PropTypes from \"prop-types\";\n\nconst pieChartOptions = {\n  chart: {\n    animations: {\n      enabled: false,\n    }\n  },\n  tooltip: {y: {formatter: val => Math.round(val / 1024 / 1024) + 'MB'}}\n};\n\nconst styles = theme => ({\n  title: {\n    textAlign: 'center',\n    paddingTop: 5,\n    color: '#686868'\n  }\n});\n\nclass SystemInfo extends Component {\n\n  constructor(props) {\n    super(props);\n    this.systemManager = new SystemManager(props);\n    this.state = {\n      memoryOptions: {\n        ...pieChartOptions,\n        labels: ['Active', 'Free', 'Buffer'],\n      },\n      memorySeries: [],\n      swapOptions: {\n        ...pieChartOptions,\n        labels: ['Used', 'Free'],\n      },\n      swapSeries: [],\n      cpuOptions: this._cpuOptions(),\n      cpuSeries: [{\n        name: 'cpu',\n        data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      }],\n      info: {}\n    };\n    this.systemManager.staticSystemInfo()\n      .then(info => {\n        this.setState(info);\n      });\n    this.autoUpdate = setInterval(this.update, 2000);\n  }\n\n  _cpuOptions = () => {\n    return {\n      chart: {\n        animations: {\n          enabled: false,\n        }\n      },\n      xaxis: {type: 'category', labels: {show: false}, axisTicks: {show: false}},\n      yaxis: {min: 0, max: 100, tickAmount: 5, labels: {formatter: value => Math.trunc(value) + '%'}},\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'straight'\n      }\n    }\n  };\n\n  update = () => {\n    this.systemManager.systemInfo()\n      .then((data) => {\n        if (!data) return;\n        // memory\n        const {mem, currentLoad} = data.info;\n        const memorySeries = [mem.active, mem.free, mem.buffcache];\n\n        // swap\n        const swapSeries = [mem.swapused, mem.swapfree];\n\n        // cpu\n        const cpuSeries = [{name: this.state.cpuSeries[0].name, data: [...this.state.cpuSeries[0].data]}];\n        cpuSeries[0].data.push(currentLoad.currentload);\n        if (cpuSeries[0].data.length > 20) cpuSeries[0].data.splice(0, 1);\n\n        this.setState({memorySeries, swapSeries, cpuSeries})\n      })\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.autoUpdate);\n  }\n\n  renderText = (data) => {\n    if (!data) {\n      return 'Loading...';\n    }\n    const texts = [];\n    for (let key in data) {\n      const value = data[key];\n      if (value === '' || value == null) continue;\n      if (typeof value !== \"object\") {\n        texts.push(\n          <React.Fragment key={key}>\n            <span style={{fontWeight: 'bold'}}>{key.charAt(0).toUpperCase() + key.slice(1)}: </span>\n            {value}\n            <br/>\n          </React.Fragment>\n        );\n      } else {\n        for (let innerKey in value) {\n          const title = key.charAt(0).toUpperCase() + key.slice(1) + ' - ' + innerKey;\n          texts.push(\n            <React.Fragment key={title}>\n              <span style={{fontWeight: 'bold'}}>{title}: </span>\n              {value[innerKey]}\n              <br/>\n            </React.Fragment>\n          )\n        }\n      }\n    }\n    return texts;\n  };\n\n  render() {\n    const {classes} = this.props;\n    const {info} = this.state;\n    return (\n      <Grid container spacing={1}>\n        <Grid item xs={12} sm={12} md={6} lg={4} xl={4}>\n          <Card>\n            <Typography variant=\"h5\" gutterBottom className={classes.title}>\n              CPU Usage\n            </Typography>\n            <CardContent>\n              <ReactApexChart options={this.state.cpuOptions} series={this.state.cpuSeries} type=\"area\" height={250}/>\n            </CardContent>\n\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={6} lg={4} xl={3}>\n          <Card>\n            <Typography variant=\"h5\" gutterBottom className={classes.title}>\n              Memory Usage\n            </Typography>\n            <CardContent>\n              <ReactApexChart options={this.state.memoryOptions} series={this.state.memorySeries} type=\"pie\"\n                              height={288}/>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={6} lg={4} xl={3}>\n          <Card>\n            <Typography variant=\"h5\" gutterBottom className={classes.title}>\n              Swap Usage\n            </Typography>\n            <CardContent>\n              <ReactApexChart options={this.state.swapOptions} series={this.state.swapSeries} type=\"pie\" height={288}/>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={6} lg={4} xl={3}>\n          <Card>\n            <Typography variant=\"h5\" gutterBottom className={classes.title}>\n              System\n            </Typography>\n            <CardContent>\n              {this.renderText(info.system)}\n              {this.renderText(info.osInfo)}\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={6} lg={4} xl={3}>\n          <Card>\n            <Typography variant=\"h5\" gutterBottom className={classes.title}>\n              CPU\n            </Typography>\n            <CardContent>\n              {this.renderText(info.cpu)}\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={6} lg={4} xl={3}>\n          <Card>\n            <Typography variant=\"h5\" gutterBottom className={classes.title}>\n              Disks\n            </Typography>\n            <CardContent>\n              {this.renderText(info.diskLayout)}\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nSystemInfo.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SystemInfo);\n"],"sourceRoot":""}