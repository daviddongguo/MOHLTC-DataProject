{"version":3,"sources":["views/components/Loading.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","progress","margin","spacing","marginTop","Loading","props","classes","in","style","textAlign","className","variant","color","message","createMuiTheme","palette","primary","blue","DefaultLayout","React","lazy","Login","Register","ForgetPassword","Page404","Page500","App","ThemeProvider","fallback","exact","path","name","component","render","params","mode","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1c97e4b8.chunk.js","sourcesContent":["import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {CircularProgress, Fade, Typography} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  progress: {\n    margin: theme.spacing(2),\n    marginTop: theme.spacing(4),\n  },\n}));\n\nexport default function Loading(props) {\n  const classes = useStyles();\n  return (\n    <Fade in>\n      <div style={{textAlign: 'center'}}>\n        <CircularProgress className={classes.progress}/>\n        <Typography variant=\"subtitle2\" color={\"textSecondary\"}>\n          {props.message ? props.message : 'Loading Components...'}\n        </Typography>\n      </div>\n    </Fade>\n  );\n}\n","import React, {Component, Suspense} from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport Loading from './views/components/Loading';\nimport './App.scss';\n\nimport {createMuiTheme} from \"@material-ui/core/styles\";\nimport {ThemeProvider} from \"@material-ui/styles\";\nimport {blue} from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n\n\n// Containers\nconst DefaultLayout = React.lazy(() => import('./containers/DefaultLayout' /* webpackChunkName: \"defaultLayout\" */));\n\n// Pages\nconst Login = React.lazy(() => import('./views/Pages/Login' /* webpackChunkName: \"login\" */));\n\nconst Register = React.lazy(() => import('./views/Pages/Register' /* webpackChunkName: \"register\" */));\n\nconst ForgetPassword = React.lazy(() => import('./views/Pages/ForgetPassword' /* webpackChunkName: \"forgetPassword\" */),);\n\nconst Page404 = React.lazy(() => import('./views/Pages/Page404' /* webpackChunkName: \"404\" */),);\n\nconst Page500 = React.lazy(() => import('./views/Pages/Page500' /* webpackChunkName: \"500\" */));\n\nclass App extends Component {\n\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <Suspense fallback={<Loading/>}>\n          <HashRouter>\n            <Switch>\n              <Route exact path=\"/login\" name=\"Login Page\" component={Login}/>\n              <Route exact path=\"/register\" name=\"Register Page\"\n                     render={props => <Register params={{mode: 'reg'}} {...props}/>}/>\n              <Route exact path=\"/setup\" name=\"Setup Page\"\n                     render={props => <Register params={{mode: 'setup'}} {...props}/>}/>\n              <Route exact path=\"/forgetpassword\" name=\"Reset Password Page\" component={ForgetPassword}/>\n              <Route exact path=\"/404\" name=\"Page 404\" component={Page404}/>\n              <Route exact path=\"/500\" name=\"Page 500\" component={Page500}/>\n              <Route path=\"/\" name=\"Home\" component={DefaultLayout}/>\n            </Switch>\n          </HashRouter>\n        </Suspense>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}