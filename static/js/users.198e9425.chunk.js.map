{"version":3,"sources":["views/Users/Users.js"],"names":["MaterialTable","React","lazy","PermissionSelect","props","permissions","selected","handleChange","username","htmlFor","multiple","value","onChange","input","id","renderValue","length","map","name","key","checked","indexOf","primary","Users","onPermissionChange","event","userToUpdate","userList","state","i","target","setState","updatePermission","active","then","response","showMessage","data","message","success","catch","err","clickActiveButton","a","switchUserActive","res","getAllUsers","users","e","clickValidatedButton","user","validated","switchUserValidate","buildErrorParams","window","getAllPermissions","console","log","this","className","style","maxWidth","fallback","columns","title","field","type","render","rowData","Date","createDate","toLocaleString","onClick","color","Component"],"mappings":"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","file":"static/js/users.198e9425.chunk.js","sourcesContent":["import {\n  Checkbox,\n  FormControl,\n  Input,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport React, { Component, Suspense } from \"react\";\nimport { Badge } from \"reactstrap\";\nimport { buildErrorParams } from \"../../controller/common\";\nimport {\n  getAllPermissions,\n  getAllUsers,\n  switchUserActive,\n  switchUserValidate,\n  updatePermission,\n} from \"../../controller/userManager\";\n\nconst MaterialTable = React.lazy(() =>\n  import(\"material-table\" /* webpackChunkName: \"material-table\" */)\n);\n\nfunction PermissionSelect(props) {\n  const { permissions, selected, handleChange, username } = props;\n\n  return (\n    <FormControl>\n      <InputLabel htmlFor=\"select-multiple-checkbox\"> </InputLabel>\n      <Select\n        multiple\n        value={selected}\n        onChange={handleChange(username)}\n        input={<Input id=\"select-multiple-checkbox\" />}\n        renderValue={(selected) =>\n          `${selected.length} item${selected.length < 2 ? \"\" : \"s\"} selected`\n        }\n      >\n        {permissions.map((name) => (\n          <MenuItem key={name} value={name}>\n            <Checkbox checked={selected.indexOf(name) > -1} />\n            <ListItemText primary={name} />\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n\nclass Users extends Component {\n  constructor(props) {\n    super(props);\n    window.users = this;\n    /*\n     active: true\n     createDate: \"2018-11-29T17:20:09.241Z\"\n     email: \"email@mail.com\"\n     firstName: \"firstname\"\n     groupNumber: 1\n     lastName: \"lastName\"\n     permissions: [\"CRUD-workbook-template\", \"create-delete-attribute-category\", \"user-management\"]\n     phoneNumber: \"1212122\"\n     username: \"test\"\n     validated: true\n     */\n    this.state = {\n      userList: [],\n    };\n\n    getAllPermissions().then((permissions) => {\n      this.permissions = permissions;\n      //log(\"get all permissions\")\n    });\n\n    getAllUsers()\n      .then((users) => {\n        this.setState({ userList: users });\n        console.log(this.state.userList);\n      })\n      .catch((err) => {\n        this.props.showMessage(err.response.data.message, \"error\");\n      });\n  }\n\n  onPermissionChange = (username) => (event) => {\n    // this.setState({userList: })\n    //console.log(username);\n    const userList = this.state.userList;\n    let userToUpdate;\n    for (let i = 0; i < userList.length; i++) {\n      if (userList[i].username === username) {\n        userList[i].permissions = event.target.value;\n        userToUpdate = userList[i];\n      }\n    }\n    this.setState({ userList });\n    updatePermission(username, userToUpdate.permissions, userToUpdate.active)\n      .then((response) => {\n        this.props.showMessage(\n          response.data.message,\n          response.data.success ? \"success\" : \"error\"\n        );\n      })\n      .catch((err) => {\n        this.props.showMessage(err.response.data.message, \"error\");\n      });\n  };\n\n  //FIXME: delete this function when developing\n  clickActiveButton = async (username, active) => {\n    try {\n      switchUserActive(username, !active).then((res) => {\n        getAllUsers()\n          .then((users) => {\n            this.setState({ userList: users });\n            this.props.showMessage(\n              username + \"'s active is changed.\",\n              \"success\"\n            );\n          })\n          .catch((err) => {\n            this.props.showMessage(err.response.data.message, \"error\");\n          });\n      });\n    } catch (e) {\n      this.props.showMessage(e.response.data.message, \"error\");\n    }\n  };\n\n  //FIXME: delete this function when developing\n  clickValidatedButton = async (user, validated) => {\n    switchUserValidate(user, !validated)\n      .then((res) => {\n        return getAllUsers().then((users) => {\n          this.setState({ userList: users });\n          this.props.showMessage(\n            user.username + \"'s validated is changed.\",\n            \"success\"\n          );\n        });\n      })\n      .catch((e) => this.props.showMessage(...buildErrorParams(e)));\n  };\n\n  render() {\n    const userList = this.state.userList;\n\n    return (\n      <div className=\"animated fadeIn\">\n        <div style={{ maxWidth: \"100%\" }}>\n          <Suspense fallback={<div>Loading...</div>}>\n            <MaterialTable\n              columns={[\n                {\n                  title: \"username\",\n                  field: \"username\",\n                  // render: rowData => {\n                  //   const userLink = `/users/${rowData.uid}`;\n                  //   return (<Link to={userLink}>{rowData.username}</Link>)\n                  // }\n                },\n                { title: \"email\", field: \"email\" },\n                { title: \"organization\", field: \"organization\" },\n                {\n                  title: \"Register Time\",\n                  field: \"createDate\",\n                  type: \"date\",\n                  render: (rowData) => {\n                    return new Date(rowData.createDate).toLocaleString();\n                  },\n                },\n                {\n                  title: \"permissions\",\n                  field: \"permissions\",\n                  render: (rowData) => {\n                    return (\n                      <PermissionSelect\n                        username={rowData.username}\n                        selected={rowData.permissions}\n                        handleChange={this.onPermissionChange}\n                        permissions={this.permissions}\n                      />\n                    );\n                  },\n                },\n                {\n                  // title: 'status', field: 'disabled',\n                  title: \"active\",\n                  field: \"active\",\n                  render: (rowData) => {\n                    return (\n                      <Badge\n                        // color={rowData.validated === true ? 'success' : 'danger'}>{rowData.disabled ? 'disabled' : 'enabled'}</Badge>)\n                        onClick={() =>\n                          this.clickActiveButton(\n                            rowData.username,\n                            rowData.active\n                          )\n                        }\n                        color={rowData.active === true ? \"success\" : \"danger\"}\n                      >\n                        {rowData.active ? \"active\" : \"inactive\"}\n                      </Badge>\n                    );\n                  },\n                },\n                {\n                  // title: 'status', field: 'disabled',\n                  title: \"validated\",\n                  field: \"validated\",\n                  render: (rowData) => {\n                    return (\n                      <Badge\n                        // color={rowData.validated === true ? 'success' : 'danger'}>{rowData.disabled ? 'disabled' : 'enabled'}</Badge>)\n                        onClick={() =>\n                          this.clickValidatedButton(rowData, rowData.validated)\n                        }\n                        color={\n                          rowData.validated === true ? \"success\" : \"danger\"\n                        }\n                      >\n                        {rowData.validated ? \"validated\" : \"Invalidated\"}\n                      </Badge>\n                    );\n                  },\n                },\n              ]}\n              data={userList}\n              title=\"All Accounts\"\n            />\n          </Suspense>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Users;\n"],"sourceRoot":""}