{"version":3,"sources":["views/Excel/utils/helpers.js","views/Excel/utils/hooks.js","controller/attCatManager.js","views/Tools/Import.js"],"names":["excelInstance","hooks","this","hookName","cbs","hook","Array","isArray","forEach","cb","push","filter","oldCb","args","SSF","FormulaParser","init","instance","calculateRealSelections","sheet","startRow","startCol","endRow","endCol","selections","i","topCellMerged","getCell","merged","from","row","botCellMerged","to","leftCellMerged","col","rightCellMerged","colorToRgb","color","rgb","length","substring","undefined","theme","workbook","themeColor","tint","getCellType","cell","formula","value","RichText","Date","generateNewSheetName","sheets","newSheetNumber","match","name","indexOfBySheetName","sheetName","findIndex","getSheetNames","map","AttCatManager","props","getAttributeGroup","getGroup","getCategoryGroup","updateAttributeGroup","tree","updateGroup","updateCategoryGroup","removeAttributeGroup","_id","removeGroup","removeCategoryGroup","generateObjectId","isAttribute","id","description","what","axios","post","config","server","axiosConfig","then","response","check","data","get","res","item","groups","ids","delete","withCredentials","labelName","_buildTree","documents","_flatTree","currNode","childIds","document","parent","node","children","includes","currDocument","title","upload","attCatManager","showMessage","input","createElement","type","onchange","e","file","target","files","console","log","XlsxPopulate","fromDataAsync","wb","a","categories","attributes","sheetData","atts","cats","rows","_rows","entries","sort","entry1","entry2","cells","_cells","cellValue","getValue","test","newItem","Number","columnNumber","maxRowNumber","batchAdd","res1","message","res2","click","ImportId","variant","onClick"],"mappings":"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","file":"static/js/importId.485f5245.chunk.js","sourcesContent":["import XlsxPopulate, {RichText, FormulaError, FormulaParser} from \"xlsx-populate\";\n\nconst {SSF} = FormulaParser;\nexport {FormulaError, XlsxPopulate, RichText, FormulaParser, SSF};\n\nexport let excelInstance;\n\nexport function init(instance) {\n  excelInstance = instance;\n}\n\n/**\n * Internal functions\n */\n\nexport const shallowCompare = (obj1, obj2) =>\n  Object.keys(obj1).length === Object.keys(obj2).length &&\n  Object.keys(obj1).every(key =>\n    obj2.hasOwnProperty(key) && obj1[key] === obj2[key]\n  );\n\n/**\n * Calculate the real range selections.\n * Note: using 1-based indexing\n * @param {Sheet} sheet - Sheet of the selections.\n * @param {number} startRow - From mouse down event.\n * @param {number} startCol - From mouse down event.\n * @param {number} endRow - From mouse up event.\n * @param {number} endCol - From mouse up event.\n */\nexport const calculateRealSelections = (sheet, startRow, startCol, endRow, endCol) => {\n  const selections = [startRow, startCol, endRow, endCol];\n  // check outer cells and adjust selections\n  for (let i = startCol; i <= endCol; i++) {\n    // iterate through first row\n    const topCellMerged = sheet.getCell(startRow, i).merged();\n    if (topCellMerged && topCellMerged.from.row < selections[0]) {\n      selections[0] = topCellMerged.from.row;\n    }\n\n    // iterate through last row\n    const botCellMerged = sheet.getCell(endRow, i).merged();\n    if (botCellMerged && botCellMerged.to.row > selections[2]) {\n      selections[2] = botCellMerged.to.row;\n    }\n  }\n\n  for (let i = startRow; i <= endRow; i++) {\n    // iterate through first col\n    const leftCellMerged = sheet.getCell(i, startCol).merged();\n    if (leftCellMerged && leftCellMerged.from.col < selections[1]) {\n      selections[1] = leftCellMerged.from.col;\n    }\n\n    // iterate through last col\n    const rightCellMerged = sheet.getCell(i, endCol).merged();\n    if (rightCellMerged && rightCellMerged.to.col > selections[3]) {\n      selections[3] = rightCellMerged.to.col;\n    }\n  }\n  return selections;\n};\n\nexport function argbToRgb(color) {\n  if (typeof color === 'string') {\n    return color;\n  }\n  if (color && color.rgb) {\n    return color.rgb.length === 6 ? color.rgb : color.rgb.substring(2);\n  }\n\n  if (color === undefined || color.argb === undefined)\n    return undefined;\n  return color.argb.substring(2);\n}\n\nexport function generateTableData(rowNum, colNum) {\n  const res = [];\n  for (let i = 0; i < rowNum; i++) {\n    if (i === 0) {\n      const firstRow = [];\n      for (let j = 0; j < colNum; j++) {\n        firstRow.push(null);\n      }\n      res.push(firstRow)\n    } else {\n      res.push([])\n    }\n  }\n  return res;\n}\n\nexport function generateTableStyle(rowNum, colNum) {\n  const res = {};\n  for (let i = 0; i < rowNum; i++) {\n    res[i] = {};\n    for (let j = 0; j < colNum; j++) {\n      res[i][j] = {};\n    }\n  }\n  return res;\n}\n\nexport function createArray(value, length) {\n  const res = [];\n  for (let i = 0; i < length; i++) {\n    res.push(value);\n  }\n  return res;\n}\n\nexport function colorToRgb(color) {\n  if (!color)\n    return undefined;\n  if (color.rgb) {\n    if (color.rgb === 'System Foreground') {\n      // TO-DO\n      return '000000';\n    } else if (color.rgb === 'System Background') {\n      return 'ffffff'\n    }\n    return color.rgb.length === 6 ? color.rgb : color.rgb.substring(2);\n  }\n\n  if (color.theme !== undefined) {\n    return excelInstance.workbook.theme().themeColor(color.theme, color.tint)\n  }\n}\n\n/**\n * Get cell current data type\n * @param cell\n * @return {'formula', 'richtext', 'date', 'text', 'number'}\n */\nexport function getCellType(cell) {\n  if (!cell)\n    return undefined;\n  else if (typeof cell.formula() === 'string') {\n    return 'formula';\n  } else if (cell.value() instanceof RichText) {\n    return 'richtext';\n  } else if (cell.value() instanceof Date) {\n    return 'date';\n  } else if (cell.value() === undefined || cell.value() === null || typeof cell.value() === 'string') {\n    return 'text';\n  } else {\n    return typeof cell.value(); // number, date ...\n  }\n}\n\n/**\n * Generate a new sheet name, used when creating new sheet.\n * @param {Workbook} workbook\n */\nexport function generateNewSheetName(workbook) {\n  const sheets = workbook.sheets();\n  let newSheetNumber = sheets.length + 1;\n  for (let i = 0; i < sheets.length; i++) {\n    const name = sheets[i].name();\n    const match = name.match(/^Sheet(\\d+)$/);\n    if (match) {\n      if (newSheetNumber <= match[1]) {\n        newSheetNumber++;\n      }\n    }\n  }\n  return 'Sheet' + newSheetNumber;\n}\n\n/**\n * Returns the index of the sheet name.\n * Otherwise, it returns -1, indicating that no element passed the test.\n * @param {Workbook} workbook\n * @param {string} sheetName\n * @return {*}\n */\nexport function indexOfBySheetName(workbook, sheetName) {\n  if (!workbook) return -1;\n  const sheets = workbook.sheets();\n  return sheets.findIndex(sheet => sheet.name() === sheetName);\n}\n\nexport function getSheetNames(workbook) {\n  if (!workbook) return [];\n  return workbook.sheets().map(sheet => sheet.name());\n}\n","/**\n * @typedef {'afterSelection'} Hooks~ExcelHooks\n */\n\n/**\n * @callback Hooks~afterSelectionCallback\n * @param {number} row\n * @param {number} col\n * @param {number} row2\n * @param {number} col2\n * @param {number} startRow\n * @param {number} startCol\n */\n\n/**\n * Excel Hooks.\n */\nclass Hooks {\n  constructor() {\n    this.hooks = {};\n  }\n\n  /**\n   * Add a hook.\n   * @param {ExcelHooks|string} hookName\n   * @param {Hooks~afterSelectionCallback|function[]|function} cbs - callback(s)\n   */\n  add(hookName, cbs) {\n    let hook = this.hooks[hookName];\n    if (!hook) hook = this.hooks[hookName] = [];\n    if (Array.isArray(cbs)) {\n      cbs.forEach(cb => {\n        hook.push(cb);\n      })\n    } else {\n      hook.push(cbs);\n    }\n  }\n\n  remove(hookName, cb) {\n    let hook = this.hooks[hookName];\n    if (!hook) return;\n    this.hooks[hookName] = hook.filter(oldCb => oldCb !== cb);\n  }\n\n  clear() {\n    this.hooks = {};\n  }\n\n  /**\n   * Call a hook.\n   * @param {ExcelHooks|string} hookName\n   * @param args\n   */\n  invoke(hookName, ...args) {\n    const cbs = this.hooks[hookName];\n    if (cbs) cbs.forEach(cb => cb(...args));\n  }\n}\n\nexport const hooks = new Hooks();\n","import axios from \"axios\";\nimport config from \"./../config/config\";\nimport {generateObjectId, check, axiosConfig} from './common';\n\n/**\n * Singleton Pattern\n */\nlet instance = null;\n\nexport default class AttCatManager {\n\n  constructor(props) {\n    if (!instance) {\n      instance = this;\n      // init\n      this.props = props;\n    }\n    return instance;\n  }\n\n  add(isAttribute, id, name, description) {\n    const what = isAttribute ? 'attribute' : 'category';\n    return axios.post(config.server + '/api/v2/' + what, {id, name, description}, axiosConfig)\n      .then(response => {\n        if (check(response)) {\n          return response.data;\n        }\n      });\n  }\n\n  batchAdd(isAttribute, data) {\n    const what = isAttribute ? 'attribute' : 'category';\n    return axios.post(config.server + '/api/v2/batch/' + what, {data}, axiosConfig)\n      .then(response => {\n        if (check(response)) {\n          return response.data;\n        }\n      });\n  }\n\n  /**\n   * Get attribute or category\n   * @param isAttribute\n   * @return {Promise<AxiosResponse<T> | never>}\n   */\n  get(isAttribute) {\n    const what = isAttribute ? 'attribute' : 'category';\n    return axios.get(config.server + '/api/v2/' + what, axiosConfig)\n      .then(response => {\n        if (check(response)) {\n          const data = response.data.data;\n          const res = [];\n          for (let i = 0; i < data.length; i++) {\n            const item = data[i];\n            res.push([item.id, item.name, item.description || '', item._id, item.groups]);\n          }\n          return res;\n        }\n      })\n  }\n\n  delete(isAttribute, ids) {\n    const what = isAttribute ? 'attribute' : 'category';\n    return axios.delete(config.server + '/api/v2/' + what + '', {\n      data: {ids: ids},\n      withCredentials: axiosConfig.withCredentials\n    })\n      .then(response => {\n        if (check(response)) {\n          return response.data;\n        }\n      })\n  }\n\n  assignGroups(isAttribute, data) {\n    const what = isAttribute ? 'attribute' : 'category';\n    return axios.post(`${config.server}/api/v2/${what}/assign/group`, data, axiosConfig)\n      .then(response => {\n        if (check(response)) {\n          return response.data;\n        }\n      })\n  }\n\n  generateId(isAttribute) {\n    const what = isAttribute ? 'attribute' : 'category';\n    return axios.get(`${config.server}/api/v2/${what}/generate/id`, axiosConfig)\n      .then(response => {\n        if (check(response)) {\n          return response.data.id;\n        }\n      })\n  }\n\n  /**\n   * @param {boolean} isAttribute\n   * @param labelName\n   * @return {*}\n   */\n  getGroup(isAttribute, labelName = 'title') {\n    const what = isAttribute ? 'attribute' : 'category';\n    return axios.get(`${config.server}/api/v2/${what}/group`, axiosConfig)\n      .then(response => {\n        if (check(response)) {\n          return response.data;\n        }\n      })\n      .then(data => {\n        return this._buildTree(data.documents, labelName);\n      })\n  }\n\n  getAttributeGroup = () => this.getGroup(true);\n\n  getCategoryGroup = () => this.getGroup(false);\n\n  updateGroup(isAttribute, tree) {\n    const what = isAttribute ? 'attribute' : 'category';\n    return axios.post(`${config.server}/api/v2/${what}/group`, {documents: this._flatTree(tree)}, axiosConfig)\n      .then(response => {\n        if (check(response)) {\n          return response.data;\n        }\n      });\n  }\n\n  updateAttributeGroup = (tree) => this.updateGroup(true, tree);\n\n  updateCategoryGroup = (tree) => this.updateGroup(false, tree);\n\n  removeGroup(isAttribute, _id) {\n    const what = isAttribute ? 'attribute' : 'category';\n    return axios.delete(`${config.server}/api/v2/${what}/group/${_id}`, axiosConfig)\n      .then(response => {\n        if (check(response)) {\n          return response.data;\n        }\n      });\n  }\n\n  removeAttributeGroup = (_id) => this.removeGroup(true, _id);\n\n  removeCategoryGroup = (_id) => this.removeGroup(false, _id);\n\n  /**\n   * Generate a _id\n   * @param {number} [number=1]\n   * @return {Promise<AxiosResponse<T> | never>}\n   */\n  generateObjectId = generateObjectId;\n\n  /**\n   * Build group tree.\n   * @param documents\n   * @param labelName\n   * @param [currNode]\n   * @param [tree]\n   * @param {Array} [childIds] - array of ids\n   * @private\n   */\n  _buildTree(documents, labelName, currNode, tree = [], childIds) {\n    // basis\n    if (currNode == null) {\n      for (let document of documents) {\n        if (!document.parent) {\n          // does not have parent, master node\n          const node = {\n            [labelName]: document.name,\n            _id: document._id,\n            children: []\n          };\n          tree.push(node);\n          this._buildTree(documents, labelName, node, tree, document.children);\n        }\n      }\n      return tree;\n    } else {\n      if (childIds.length === 0) return;\n      for (let document of documents) {\n        if (childIds.includes(document._id)) {\n          const node = {\n            [labelName]: document.name,\n            _id: document._id,\n            children: []\n          };\n          currNode.children.push(node);\n          this._buildTree(documents, labelName, node, tree, document.children);\n        }\n      }\n    }\n  }\n\n  _flatTree(tree, documents = [], currNode, currDocument) {\n    // basis\n    if (!currNode) {\n      for (let node of tree) {\n        const document = {\n          _id: node._id,\n          name: node.title,\n          children: []\n        };\n        documents.push(document);\n        this._flatTree(tree, documents, node, document);\n      }\n      return documents;\n    } else {\n      if (!currNode.children || currNode.children.length === 0) return;\n      for (let node of currNode.children) {\n        currDocument.children.push(node._id);\n        const document = {\n          _id: node._id,\n          name: node.title,\n          children: [],\n          parent: currNode._id\n        };\n        documents.push(document);\n        this._flatTree(tree, documents, node, document);\n      }\n    }\n\n  }\n}\n","import {XlsxPopulate} from '../Excel/utils'\nimport React from 'react';\nimport {Button} from '@material-ui/core';\nimport AttCatManager from \"../../controller/attCatManager\";\n\nconst upload = (attCatManager, showMessage) => () => {\n  const input = document.createElement('input');\n  input.type = 'file';\n\n  input.onchange = e => {\n    const file = e.target.files[0];\n    console.log(file.name);\n    XlsxPopulate.fromDataAsync(file)\n      .then(async wb => {\n        const data = {};\n        const categories = [];\n        const attributes = [];\n        wb.sheets().forEach(sheet => {\n          const sheetData = data[sheet.name()] = {\n            atts: [],\n            cats: []\n          };\n          const rows = [...sheet._rows.entries()].sort((entry1, entry2) => {\n            return entry1[0] - entry2[0];\n          });\n          // read categories\n          rows.forEach(([rowNumber, row]) => {\n            const cells = [...row._cells.entries()].sort((entry1, entry2) => {\n              return entry1[0] - entry2[0];\n            });\n            const firstCellInRow = row.cell(1);\n            const cellValue = firstCellInRow.getValue();\n            if (/^[0-9]*$/.test(cellValue)) {\n              for (let i = 0; i < cells.length; i++) {\n                const cell = cells[i][1];\n                if (typeof cell.getValue() === \"string\") {\n                  const newItem = {\n                    id: Number(cellValue),\n                    name: cell.getValue(),\n                    description: file.name + ' > ' + sheet.name()\n                  };\n                  categories.push(newItem);\n                  sheetData.cats.push(newItem);\n                  break;\n                }\n              }\n            }\n          });\n          // read attributes\n          const firstRow = sheet.row(1);\n          firstRow._cells.forEach((cell, columnNumber) => {\n            const cellValue = cell.getValue();\n            if (/^[0-9]*$/.test(cellValue)) {\n              const maxRowNumber = rows[rows.length - 1][0];\n              for (let i = 1; i <= maxRowNumber; i++) {\n                const value = sheet.row(i).cell(columnNumber).getValue();\n                if (typeof value === \"string\") {\n                  const newItem = {id: Number(cellValue), name: value, description: file.name + ' > ' + sheet.name()}\n                  attributes.push(newItem);\n                  sheetData.atts.push(newItem);\n                  break;\n                }\n              }\n            }\n          });\n        });\n        console.log(data);\n        const res1 = (await attCatManager.batchAdd(true, attributes)).message;\n        const res2 = (await attCatManager.batchAdd(false, categories)).message;\n        showMessage(res1 + '\\n' + res2, 'success');\n      });\n  };\n\n  input.click();\n};\n\nexport default function ImportId(props) {\n  const attCatManager = new AttCatManager(props);\n  return (\n    <Button variant=\"contained\" color=\"primary\" onClick={upload(attCatManager, props.showMessage)}>\n      Upload Workbook\n    </Button>\n  )\n}\n"],"sourceRoot":""}